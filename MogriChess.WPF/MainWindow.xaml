<Window x:Class="MogriChess.WPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:viewModels="clr-namespace:MogriChess.ViewModels;assembly=MogriChess.ViewModels"
        xmlns:models="clr-namespace:MogriChess.Models;assembly=MogriChess.Models"
        xmlns:customControls="clr-namespace:MogriChess.WPF.CustomControls"
        d:DataContext="{d:DesignInstance viewModels:Game}"
        mc:Ignorable="d"
        Title="MogriChess" 
        WindowStartupLocation="CenterScreen"
        FontSize="11pt"
        MinWidth="975"
        Width="975"
        Height="800">

    <Window.Resources>
        <Style TargetType="{x:Type models:Piece}"/>
        <BooleanToVisibilityConverter x:Key="VisibleIfTrue"/>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Menu Grid.Row="0" Grid.Column="0"
              FontSize="11pt">
            <MenuItem Header="Game">
                <MenuItem Header="Start New Game...">
                    <MenuItem Header="Light=Human Dark=Bot"
                              Click="LightHumanDarkBot_OnClick"/>
                    <MenuItem Header="Light=Bot Dark=Human"
                              Click="LightBotDarkHuman_OnClick"/>
                    <MenuItem Header="Human vs. Human"
                              Click="LightHumanDarkHuman_OnClick"/>
                    <MenuItem Header="Bot vs. Bot"
                              x:Name="BotVsBotMenuOption"
                              Click="LightBotDarkBot_OnClick"
                              Visibility="Collapsed"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Save...">
                    <MenuItem Header="Save Current Game to Disk"
                              Click="WriteCurrentGameState_OnClick"/>
                    <MenuItem Header="Save Move History to Disk"
                              Click="WriteMoveHistory_OnClick"/>
                </MenuItem>
                <MenuItem Header="Load..."
                          IsEnabled="False">
                </MenuItem>
                <Separator/>
                <MenuItem Header="Preferences">
                    <MenuItem Header="Display Rank and File Label"
                              IsCheckable="True"
                              Checked="DisplayRankAndFileLabels_OnChecked"
                              Unchecked="DisplayRankAndFileLabels_OnUnchecked"
                              IsChecked="{Binding DisplayRankFileLabels,
                                              UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
                    <MenuItem Header="Display Valid Moves"
                              IsCheckable="True"
                              Checked="DisplayValidMoves_OnChecked"
                              Unchecked="DisplayValidMoves_OnUnchecked"
                              IsChecked="{Binding DisplayValidDestinations,
                                              UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
                    <Separator/>
                    <MenuItem Header="Select Board Color..."
                              Click="SelectBoardColor_OnClick"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Exit"
                          Click="Exit_OnClick"/>
            </MenuItem>
            <MenuItem Header="Help">
                <MenuItem Header="Help"
                          Click="Help_OnClick"/>
                <Separator/>
                <MenuItem Header="About"
                          Click="About_OnClick"/>
            </MenuItem>
        </Menu>

        <Grid Grid.Row="1" Grid.Column="0"
              Margin="10,10,10,10">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="200"/>
            </Grid.ColumnDefinitions>

            <!-- Game Board -->
            <Canvas Grid.Row="0" Grid.Column="0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top">

                <ItemsControl ItemsSource="{Binding Board.Squares.Values}">

                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                            </Grid>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>

                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Setter Property="Grid.Row" Value="{Binding UiGridRow}" />
                            <Setter Property="Grid.Column" Value="{Binding UiGridColumn}" />
                            <Setter Property="Width" Value="90"/>
                            <Setter Property="Height" Value="90"/>
                        </Style>
                    </ItemsControl.ItemContainerStyle>

                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Canvas ZIndex="1"
                                    MouseLeftButtonUp="ClickedOnSquare_OnMouseLeftButtonUp">

                                <!-- Set base square color -->
                                <Canvas.Style>
                                    <Style TargetType="{x:Type Canvas}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Color}" Value="Light">
                                                <Setter Property="Background"
                                                        Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},
                                                                        Path=DataContext.Board.BoardColorScheme.LightColor,
                                                                        Mode=TwoWay,
                                                                        UpdateSourceTrigger=PropertyChanged}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Color}" Value="Dark">
                                                <Setter Property="Background"
                                                        Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},
                                                                        Path=DataContext.Board.BoardColorScheme.DarkColor,
                                                                        Mode=TwoWay,
                                                                        UpdateSourceTrigger=PropertyChanged}"/>
                                            </DataTrigger>

                                        </Style.Triggers>
                                    </Style>
                                </Canvas.Style>

                                <!-- Highlight square if it's the currently-selected square -->
                                <Canvas Width="90" Height="90"
                                        ZIndex="2"
                                        Opacity=".30">
                                    <Canvas.Style>
                                        <Style>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                                    <Setter Property="Canvas.Background"
                                                            Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},
                                                                            Path=DataContext.SelectedSquareColor,
                                                                            UpdateSourceTrigger=PropertyChanged}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsSelected}" Value="False">
                                                    <Setter Property="Canvas.Background" Value="Transparent"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Canvas.Style>
                                </Canvas>

                                <!-- Highlight square if it's a valid destination -->
                                <Canvas Width="90" Height="90"
                                        ZIndex="3"
                                        Opacity=".30">
                                    <Canvas.Style>
                                        <Style>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsValidDestination}" Value="True">
                                                    <Setter Property="Canvas.Background"
                                                            Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},
                                                                            Path=DataContext.ValidDestinationSquareColor,
                                                                            UpdateSourceTrigger=PropertyChanged}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsValidDestination}" Value="False">
                                                    <Setter Property="Canvas.Background" Value="Transparent"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Canvas.Style>
                                </Canvas>

                                <!-- Square's rank and file shorthand label -->
                                <Canvas ZIndex="4"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,                                                              AncestorType={x:Type Window}},
                                                             Path=DataContext.DisplayRankFileLabels,
                                                             UpdateSourceTrigger=PropertyChanged,
                                                             Converter={StaticResource VisibleIfTrue}}">
                                    <Label Content="{Binding SquareShorthand}"/>
                                </Canvas>

                                <!-- Draw piece. Use ZIndex of 99 to put it on top of all other square decorations -->
                                <Canvas ZIndex="99">
                                    <customControls:SquareControl/>
                                </Canvas>

                            </Canvas>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Canvas>

            <!-- Movement History -->
            <Grid Grid.Row="0" Grid.Column="1"
                  VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <DataGrid Grid.Row="0" Grid.Column="0"
                          Grid.ColumnSpan="2"
                          x:Name="MoveHistoryDataGrid"
                          ItemsSource="{Binding MoveHistory}"
                          CanUserAddRows="False"
                          CanUserDeleteRows="False"
                          CanUserReorderColumns="False"
                          CanUserResizeColumns="False"
                          CanUserResizeRows="False"
                          CanUserSortColumns="False"
                          HeadersVisibility="Column"
                          IsReadOnly="True"
                          HorizontalAlignment="Stretch"
                          VerticalAlignment="Top"
                          HorizontalScrollBarVisibility="Auto"
                          AutoGenerateColumns="False">

                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Player"
                                            Binding="{Binding MovingPieceColor}"/>
                        <DataGridTextColumn Header="Move"
                                            Binding="{Binding MoveShorthand}"/>
                        <DataGridTextColumn Header=""
                                            Width="*"
                                            Binding="{Binding MoveResult, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"/>
                    </DataGrid.Columns>

                </DataGrid>

            </Grid>

        </Grid>

    </Grid>

</Window>